///////////////////////////////////////////////////////////////////////////////
//                                                                            
//  File:           MemoryHeap.cpp
//
//  Facility:       
//
//
//  Abstract:
//
//  Environment:    VC 6.0
//
//  Author:         Зайцев С. А.
//
//  Creation Date:  04/12/2003
//
///////////////////////////////////////////////////////////////////////////////

#include "MemoryHeap.hpp"

///////////////////////////////////////////////////////////////////////////////
//
//  Function:       CMemoryHeap
//
//  Description:
//
//  
//
///////////////////////////////////////////////////////////////////////////////

CMemoryHeap::CMemoryHeap ()
{
}

///////////////////////////////////////////////////////////////////////////////
//
//  Function:       CMemoryHeap
//
//  Description:
//
//  
//
///////////////////////////////////////////////////////////////////////////////

CMemoryHeap::CMemoryHeap (const CMemoryHeap &other)
{
    *this = other;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Function:       ~CMemoryHeap
//
//  Description:
//
//  
//
///////////////////////////////////////////////////////////////////////////////

CMemoryHeap::~CMemoryHeap ()
{
    Reset ();
}

///////////////////////////////////////////////////////////////////////////////
//
//  Function:       operator =
//
//  Description:
//
//  
//
///////////////////////////////////////////////////////////////////////////////

CMemoryHeap & CMemoryHeap::operator = (const CMemoryHeap &other)
{
    m_dwFlags     = other.m_dwFlags;  
    m_dwHeapID    = other.m_dwHeapID;
    m_dwProcessID = other.m_dwProcessID;

    m_Blocks      = other.m_Blocks;

    return *this;
};

///////////////////////////////////////////////////////////////////////////////
//
//  Function:       operator ==
//
//  Description:
//
//  
//
///////////////////////////////////////////////////////////////////////////////

int CMemoryHeap::operator == (const CMemoryHeap &other) const
{
    return m_dwHeapID == other.m_dwHeapID;
};

///////////////////////////////////////////////////////////////////////////////
//
//  Function:       RestoreGuts
//
//  Description:
//
//  
//
///////////////////////////////////////////////////////////////////////////////

BOOL CMemoryHeap::RestoreGuts (ifstream &is)
{
    Reset ();
    if (! is)
    {
        return FALSE;
    }

    is.read ((char *) &m_dwProcessID, sizeof (m_dwProcessID));
    is.read ((char *) &m_dwHeapID, sizeof (m_dwHeapID));
    is.read ((char *) &m_dwFlags, sizeof (m_dwFlags));
    
    DWORD nCount = 0;
    is.read ((char *) &nCount, sizeof (nCount));
    if (! is)
    {
        return FALSE;
    }

    for (; nCount > 0; --nCount) 
    {
        CMemoryBlock block;
        if (! m_Blocks.RestoreGuts (is))
        {
            Reset ();

            return FALSE;
        }
        m_Blocks.push_back (block);
    }

    return (! is) == FALSE;
}

///////////////////////////////////////////////////////////////////////////////
//
//  Function:       Reset
//
//  Description:
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void CMemoryBlock::Reset ()
{
    blocks.clear ();
}

///////////////////////////////////////////////////////////////////////////////
//
//  Function:       Dump
//
//  Description:
//
//  
//
///////////////////////////////////////////////////////////////////////////////

void CMemoryBlock::Dump (ofstream &os)
{
}

///////////////////////////////////////////////////////////////////////////////
//
//  Function:       GetTableHeader
//
//  Description:
//
//  
//
///////////////////////////////////////////////////////////////////////////////

static const char * CMemoryBlock::GetTableHeader () 
{
}